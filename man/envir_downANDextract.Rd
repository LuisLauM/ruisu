% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/envir_downANDextract.R
\name{envir_downANDextract}
\alias{envir_downANDextract}
\title{Download environmental data from Copernicus services, extract
variables and values, and then add them to a set of coordinates.}
\usage{
envir_downANDextract(
  pts,
  credentials,
  datasetID,
  datasetVersion = NULL,
  service = NULL,
  vars,
  depth_range = c(5, 10),
  dx = 2,
  download = FALSE,
  outDir = "./",
  outSufix = "mercator",
  quite = FALSE,
  compression = FALSE,
  extract_method = "simple"
)
}
\arguments{
\item{pts}{\code{data.frame} or \code{tibble} of coordinates where the user
wants to add the environmental variables. See Details.}

\item{credentials}{A 2-length \code{character} list or vector with credentials
(user and password) to access Copernicus server.}

\item{datasetID}{The dataset ID as it is specified in the Copernicus website.}

\item{datasetVersion}{The dataset version as it is specified in the
Copernicus website.}

\item{service}{one of the available services using the service name among
\code{['arco-geo-series', 'arco-time-series', 'omi-arco', 'static-arco', 'opendap', 'motu']}
or its short name among \code{['geoseries', 'timeseries', 'omi-arco', 'static-arco', 'opendap', 'motu']}.}

\item{vars}{\code{character} vector with the names of the variables that will
be accessed and added to \code{pts}.}

\item{depth_range}{2-length \code{numeric} vector with the range of depths
the user wants to download environmental data.}

\item{dx}{\code{numeric} vector with the Size of the grid that will be used
to download environmental data selectively.}

\item{download}{\code{logical} if \code{TRUE}, allows to download and save
the environmental data. Otherwise, each file will be downloaded as temporal
file and will be deleted then.}

\item{outDir}{\code{character} with the directory path where the data will be
downloaded. Omitted if \code{download=FALSE}.}

\item{outSufix}{\code{character} with the suffix that will be added to
downloaded files. Omitted if \code{download=FALSE}.}

\item{quite}{\code{logical} if \code{TRUE}, the function will return progress
messages.}

\item{compression}{Specify a compression level to apply on the NetCDF output
file. A value of 0 means no compression, and 9 is the highest level of
compression available. See Details.}

\item{extract_method}{\code{character}. Method for extracting values with
points ("simple" or "bilinear"). With "simple" values for the cell a point
falls in are returned. With "bilinear" the returned values are interpolated
from the values of the four nearest raster cells. This argument will be
transmitted to \link{extract}[terra] function (\code{method} argument).}
}
\value{
The \code{pts} object with extra columns corresponding to the
selected variables.
}
\description{
This function takes a table of coordinates-date and makes a
selectively download of data (by now, from Copernicus server). Then it adds
the dowloaded values to the original table. The selectively process implies
that the environmental data will be downloaded for each date (day) just for
a section 'around' the coordinates. How 'around' will depend on the user (by
default, it is set in 2 degrees grid).
}
\details{
\code{pts} needs to have at least three columns called \code{lon},
\code{lat} and \code{date}. \code{date} values have to be of class \code{Date}
or \code{POSIX}, \code{lon} and \code{lat} must be \code{numeric}.

The environmental data will be downloaded always (so it is important to have
a stable internet connection), but the user can decide whether to keep or not
the files (by the use of \code{download}, \code{outDir} and \code{outSufix}
arguments. If \code{download=TRUE}, the file names will preserve the ranges
of the downloaded data (date, lon, lat and depth).

If \code{service = NULL}, the function will let \code{copernicusmarine}
choose the default value. Usually, it should be \code{arco-time-series} but
it could depend on the version.
}
\examples{
n <- 20

set.seed(123)

pts1 <- data.frame(lon = runif(n = n, min = 53, max = 98),
                  lat = runif(n = n, min = -32, max = -2),
                  date = as.Date("2010-1-1"))

pts2 <- data.frame(lon = runif(n = n, min = 53, max = 98),
                  lat = runif(n = n, min = -32, max = -2),
                  date = seq(from = as.Date("2010-1-1"),
                             to = as.Date("2010-1-1"),
                             by = "day")[as.integer(runif(n = n, min = 1, max = 10))])

outs <- downloadEnvir(pts = pts,
                      credentials = list(username = "USERNAME", password = "PASSWORD"),
                      datasetID = "cmems_mod_glo_phy_my_0.083deg_P1D-m",
                      service = "arco-time-series",
                      vars = c("thetao", "zos"))
}
